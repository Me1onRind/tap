// Code generated by protoc-gen-go. DO NOT EDIT.
// source: play_service.proto

package server

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_619856292df9b42b, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type PlayRequest struct {
	AudioPath            string   `protobuf:"bytes,1,opt,name=audioPath,proto3" json:"audioPath,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayRequest) Reset()         { *m = PlayRequest{} }
func (m *PlayRequest) String() string { return proto.CompactTextString(m) }
func (*PlayRequest) ProtoMessage()    {}
func (*PlayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_619856292df9b42b, []int{1}
}

func (m *PlayRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayRequest.Unmarshal(m, b)
}
func (m *PlayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayRequest.Marshal(b, m, deterministic)
}
func (m *PlayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayRequest.Merge(m, src)
}
func (m *PlayRequest) XXX_Size() int {
	return xxx_messageInfo_PlayRequest.Size(m)
}
func (m *PlayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PlayRequest proto.InternalMessageInfo

func (m *PlayRequest) GetAudioPath() string {
	if m != nil {
		return m.AudioPath
	}
	return ""
}

type VolumeRequest struct {
	Volume               float32  `protobuf:"fixed32,1,opt,name=volume,proto3" json:"volume,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeRequest) Reset()         { *m = VolumeRequest{} }
func (m *VolumeRequest) String() string { return proto.CompactTextString(m) }
func (*VolumeRequest) ProtoMessage()    {}
func (*VolumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_619856292df9b42b, []int{2}
}

func (m *VolumeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeRequest.Unmarshal(m, b)
}
func (m *VolumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeRequest.Marshal(b, m, deterministic)
}
func (m *VolumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeRequest.Merge(m, src)
}
func (m *VolumeRequest) XXX_Size() int {
	return xxx_messageInfo_VolumeRequest.Size(m)
}
func (m *VolumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeRequest proto.InternalMessageInfo

func (m *VolumeRequest) GetVolume() float32 {
	if m != nil {
		return m.Volume
	}
	return 0
}

type SearchRequest struct {
	Input                string   `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchRequest) Reset()         { *m = SearchRequest{} }
func (m *SearchRequest) String() string { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()    {}
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_619856292df9b42b, []int{3}
}

func (m *SearchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchRequest.Unmarshal(m, b)
}
func (m *SearchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchRequest.Marshal(b, m, deterministic)
}
func (m *SearchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchRequest.Merge(m, src)
}
func (m *SearchRequest) XXX_Size() int {
	return xxx_messageInfo_SearchRequest.Size(m)
}
func (m *SearchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchRequest proto.InternalMessageInfo

func (m *SearchRequest) GetInput() string {
	if m != nil {
		return m.Input
	}
	return ""
}

type PlayAudioInfo struct {
	Status               uint32   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Duration             int64    `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
	Curr                 int64    `protobuf:"varint,3,opt,name=curr,proto3" json:"curr,omitempty"`
	Volume               float32  `protobuf:"fixed32,4,opt,name=volume,proto3" json:"volume,omitempty"`
	Mode                 uint32   `protobuf:"varint,5,opt,name=mode,proto3" json:"mode,omitempty"`
	Pathinfo             string   `protobuf:"bytes,6,opt,name=pathinfo,proto3" json:"pathinfo,omitempty"`
	Name                 string   `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayAudioInfo) Reset()         { *m = PlayAudioInfo{} }
func (m *PlayAudioInfo) String() string { return proto.CompactTextString(m) }
func (*PlayAudioInfo) ProtoMessage()    {}
func (*PlayAudioInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_619856292df9b42b, []int{4}
}

func (m *PlayAudioInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayAudioInfo.Unmarshal(m, b)
}
func (m *PlayAudioInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayAudioInfo.Marshal(b, m, deterministic)
}
func (m *PlayAudioInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayAudioInfo.Merge(m, src)
}
func (m *PlayAudioInfo) XXX_Size() int {
	return xxx_messageInfo_PlayAudioInfo.Size(m)
}
func (m *PlayAudioInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayAudioInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PlayAudioInfo proto.InternalMessageInfo

func (m *PlayAudioInfo) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *PlayAudioInfo) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *PlayAudioInfo) GetCurr() int64 {
	if m != nil {
		return m.Curr
	}
	return 0
}

func (m *PlayAudioInfo) GetVolume() float32 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *PlayAudioInfo) GetMode() uint32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *PlayAudioInfo) GetPathinfo() string {
	if m != nil {
		return m.Pathinfo
	}
	return ""
}

func (m *PlayAudioInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type QueryReplay struct {
	Names                []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryReplay) Reset()         { *m = QueryReplay{} }
func (m *QueryReplay) String() string { return proto.CompactTextString(m) }
func (*QueryReplay) ProtoMessage()    {}
func (*QueryReplay) Descriptor() ([]byte, []int) {
	return fileDescriptor_619856292df9b42b, []int{5}
}

func (m *QueryReplay) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryReplay.Unmarshal(m, b)
}
func (m *QueryReplay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryReplay.Marshal(b, m, deterministic)
}
func (m *QueryReplay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReplay.Merge(m, src)
}
func (m *QueryReplay) XXX_Size() int {
	return xxx_messageInfo_QueryReplay.Size(m)
}
func (m *QueryReplay) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReplay.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReplay proto.InternalMessageInfo

func (m *QueryReplay) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

type ProviderReply struct {
	ProviderType         int32    `protobuf:"varint,1,opt,name=providerType,proto3" json:"providerType,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CurrDir              string   `protobuf:"bytes,3,opt,name=currDir,proto3" json:"currDir,omitempty"`
	Dirs                 []string `protobuf:"bytes,4,rep,name=dirs,proto3" json:"dirs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProviderReply) Reset()         { *m = ProviderReply{} }
func (m *ProviderReply) String() string { return proto.CompactTextString(m) }
func (*ProviderReply) ProtoMessage()    {}
func (*ProviderReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_619856292df9b42b, []int{6}
}

func (m *ProviderReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProviderReply.Unmarshal(m, b)
}
func (m *ProviderReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProviderReply.Marshal(b, m, deterministic)
}
func (m *ProviderReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProviderReply.Merge(m, src)
}
func (m *ProviderReply) XXX_Size() int {
	return xxx_messageInfo_ProviderReply.Size(m)
}
func (m *ProviderReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ProviderReply.DiscardUnknown(m)
}

var xxx_messageInfo_ProviderReply proto.InternalMessageInfo

func (m *ProviderReply) GetProviderType() int32 {
	if m != nil {
		return m.ProviderType
	}
	return 0
}

func (m *ProviderReply) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProviderReply) GetCurrDir() string {
	if m != nil {
		return m.CurrDir
	}
	return ""
}

func (m *ProviderReply) GetDirs() []string {
	if m != nil {
		return m.Dirs
	}
	return nil
}

type LocalProvider struct {
	Dirs                 []string `protobuf:"bytes,1,rep,name=dirs,proto3" json:"dirs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LocalProvider) Reset()         { *m = LocalProvider{} }
func (m *LocalProvider) String() string { return proto.CompactTextString(m) }
func (*LocalProvider) ProtoMessage()    {}
func (*LocalProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_619856292df9b42b, []int{7}
}

func (m *LocalProvider) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LocalProvider.Unmarshal(m, b)
}
func (m *LocalProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LocalProvider.Marshal(b, m, deterministic)
}
func (m *LocalProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocalProvider.Merge(m, src)
}
func (m *LocalProvider) XXX_Size() int {
	return xxx_messageInfo_LocalProvider.Size(m)
}
func (m *LocalProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_LocalProvider.DiscardUnknown(m)
}

var xxx_messageInfo_LocalProvider proto.InternalMessageInfo

func (m *LocalProvider) GetDirs() []string {
	if m != nil {
		return m.Dirs
	}
	return nil
}

type PlayMode struct {
	Mode                 uint32   `protobuf:"varint,1,opt,name=mode,proto3" json:"mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayMode) Reset()         { *m = PlayMode{} }
func (m *PlayMode) String() string { return proto.CompactTextString(m) }
func (*PlayMode) ProtoMessage()    {}
func (*PlayMode) Descriptor() ([]byte, []int) {
	return fileDescriptor_619856292df9b42b, []int{8}
}

func (m *PlayMode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayMode.Unmarshal(m, b)
}
func (m *PlayMode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayMode.Marshal(b, m, deterministic)
}
func (m *PlayMode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayMode.Merge(m, src)
}
func (m *PlayMode) XXX_Size() int {
	return xxx_messageInfo_PlayMode.Size(m)
}
func (m *PlayMode) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayMode.DiscardUnknown(m)
}

var xxx_messageInfo_PlayMode proto.InternalMessageInfo

func (m *PlayMode) GetMode() uint32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

type Second struct {
	Value                int64    `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Second) Reset()         { *m = Second{} }
func (m *Second) String() string { return proto.CompactTextString(m) }
func (*Second) ProtoMessage()    {}
func (*Second) Descriptor() ([]byte, []int) {
	return fileDescriptor_619856292df9b42b, []int{9}
}

func (m *Second) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Second.Unmarshal(m, b)
}
func (m *Second) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Second.Marshal(b, m, deterministic)
}
func (m *Second) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Second.Merge(m, src)
}
func (m *Second) XXX_Size() int {
	return xxx_messageInfo_Second.Size(m)
}
func (m *Second) XXX_DiscardUnknown() {
	xxx_messageInfo_Second.DiscardUnknown(m)
}

var xxx_messageInfo_Second proto.InternalMessageInfo

func (m *Second) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Dir struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Dir) Reset()         { *m = Dir{} }
func (m *Dir) String() string { return proto.CompactTextString(m) }
func (*Dir) ProtoMessage()    {}
func (*Dir) Descriptor() ([]byte, []int) {
	return fileDescriptor_619856292df9b42b, []int{10}
}

func (m *Dir) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Dir.Unmarshal(m, b)
}
func (m *Dir) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Dir.Marshal(b, m, deterministic)
}
func (m *Dir) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dir.Merge(m, src)
}
func (m *Dir) XXX_Size() int {
	return xxx_messageInfo_Dir.Size(m)
}
func (m *Dir) XXX_DiscardUnknown() {
	xxx_messageInfo_Dir.DiscardUnknown(m)
}

var xxx_messageInfo_Dir proto.InternalMessageInfo

func (m *Dir) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*Empty)(nil), "server.Empty")
	proto.RegisterType((*PlayRequest)(nil), "server.PlayRequest")
	proto.RegisterType((*VolumeRequest)(nil), "server.VolumeRequest")
	proto.RegisterType((*SearchRequest)(nil), "server.SearchRequest")
	proto.RegisterType((*PlayAudioInfo)(nil), "server.PlayAudioInfo")
	proto.RegisterType((*QueryReplay)(nil), "server.QueryReplay")
	proto.RegisterType((*ProviderReply)(nil), "server.ProviderReply")
	proto.RegisterType((*LocalProvider)(nil), "server.LocalProvider")
	proto.RegisterType((*PlayMode)(nil), "server.PlayMode")
	proto.RegisterType((*Second)(nil), "server.Second")
	proto.RegisterType((*Dir)(nil), "server.Dir")
}

func init() { proto.RegisterFile("play_service.proto", fileDescriptor_619856292df9b42b) }

var fileDescriptor_619856292df9b42b = []byte{
	// 554 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x5d, 0x6f, 0xd3, 0x3c,
	0x14, 0x6e, 0xd6, 0x34, 0x6d, 0x4f, 0xdf, 0xbc, 0x9a, 0xcc, 0x87, 0xa2, 0x82, 0xa6, 0xc9, 0x13,
	0xdb, 0x24, 0xc4, 0x34, 0xad, 0x88, 0x0b, 0xee, 0x26, 0x8d, 0x0b, 0xa4, 0x21, 0x42, 0x82, 0xb8,
	0x45, 0xa6, 0xf1, 0xa8, 0x45, 0x1a, 0x07, 0xc7, 0xae, 0x94, 0xdf, 0xc5, 0xbf, 0xe1, 0xd7, 0xa0,
	0x63, 0x37, 0x69, 0x42, 0x99, 0xe0, 0xce, 0xe7, 0x39, 0xcf, 0xf9, 0x3e, 0xc7, 0x40, 0xca, 0x9c,
	0xd5, 0x9f, 0x2b, 0xae, 0x36, 0x62, 0xc9, 0x2f, 0x4a, 0x25, 0xb5, 0x24, 0x01, 0x8a, 0x5c, 0xd1,
	0x31, 0x8c, 0xde, 0xac, 0x4b, 0x5d, 0xd3, 0xe7, 0x30, 0x8b, 0x73, 0x56, 0x27, 0xfc, 0xbb, 0xe1,
	0x95, 0x26, 0x4f, 0x61, 0xca, 0x4c, 0x26, 0x64, 0xcc, 0xf4, 0x2a, 0xf2, 0x8e, 0xbd, 0xf3, 0x69,
	0xb2, 0x03, 0xe8, 0x19, 0x84, 0x9f, 0x64, 0x6e, 0xd6, 0xbc, 0xa1, 0x3f, 0x86, 0x60, 0x63, 0x01,
	0xcb, 0x3d, 0x48, 0xb6, 0x12, 0x7d, 0x06, 0x61, 0xca, 0x99, 0x5a, 0xae, 0x1a, 0xe2, 0x43, 0x18,
	0x89, 0xa2, 0x34, 0x7a, 0xeb, 0xd3, 0x09, 0xf4, 0x87, 0x07, 0x21, 0x46, 0xbf, 0xc6, 0x08, 0x6f,
	0x8b, 0x3b, 0x89, 0x0e, 0x2b, 0xcd, 0xb4, 0xa9, 0x2c, 0x31, 0x4c, 0xb6, 0x12, 0x99, 0xc3, 0x24,
	0x33, 0x8a, 0x69, 0x21, 0x8b, 0xe8, 0xe0, 0xd8, 0x3b, 0x1f, 0x26, 0xad, 0x4c, 0x08, 0xf8, 0x4b,
	0xa3, 0x54, 0x34, 0xb4, 0xb8, 0x7d, 0x77, 0x12, 0xf3, 0xbb, 0x89, 0x21, 0x77, 0x2d, 0x33, 0x1e,
	0x8d, 0xac, 0x77, 0xfb, 0x46, 0xdf, 0x25, 0xd3, 0x2b, 0x51, 0xdc, 0xc9, 0x28, 0xb0, 0xe9, 0xb5,
	0x32, 0xf2, 0x0b, 0xb6, 0xe6, 0xd1, 0xd8, 0xe2, 0xf6, 0x4d, 0x4f, 0x60, 0xf6, 0xc1, 0x70, 0x55,
	0x27, 0x1c, 0x1b, 0x8c, 0xa5, 0x21, 0x8c, 0x19, 0x0f, 0xb1, 0x34, 0x2b, 0x50, 0x03, 0x61, 0xac,
	0xe4, 0x46, 0x64, 0x5c, 0x21, 0xaf, 0x26, 0x14, 0xfe, 0x2b, 0xb7, 0xc0, 0xc7, 0xba, 0x74, 0x0d,
	0x1b, 0x25, 0x3d, 0xac, 0x8d, 0x76, 0xb0, 0x8b, 0x46, 0x22, 0x18, 0x63, 0x45, 0x37, 0xc2, 0x15,
	0x38, 0x4d, 0x1a, 0x11, 0xd9, 0x99, 0x50, 0x55, 0xe4, 0xdb, 0xb8, 0xf6, 0x4d, 0x4f, 0x20, 0xbc,
	0x95, 0x4b, 0x96, 0x37, 0xb1, 0x5b, 0x92, 0xd7, 0x21, 0x1d, 0xc1, 0x04, 0xbb, 0xfe, 0x0e, 0x8b,
	0x6f, 0x1a, 0xe2, 0xed, 0x1a, 0x42, 0x8f, 0x20, 0x48, 0xf9, 0x52, 0x16, 0x19, 0xd6, 0xb6, 0x61,
	0xb9, 0x71, 0xea, 0x61, 0xe2, 0x04, 0xfa, 0x04, 0x86, 0x18, 0xbf, 0xa7, 0x9c, 0x6e, 0x95, 0x57,
	0x3f, 0x7d, 0xf0, 0xd1, 0x3b, 0x59, 0xb8, 0xcd, 0x7a, 0xaf, 0x62, 0x66, 0x2a, 0x4e, 0x1e, 0x5c,
	0xb8, 0xd5, 0xbb, 0xe8, 0xac, 0xdb, 0x3c, 0x6c, 0x40, 0xb7, 0x8c, 0x03, 0x72, 0x09, 0x41, 0xea,
	0x26, 0xde, 0x57, 0xcd, 0x1f, 0x75, 0xcd, 0xdb, 0x7d, 0xa1, 0x03, 0x72, 0x0a, 0x7e, 0xaa, 0x65,
	0xf9, 0x3b, 0xff, 0x0f, 0x9e, 0x67, 0x29, 0xd7, 0x6d, 0xdd, 0x87, 0x5d, 0x7f, 0x88, 0xec, 0x5b,
	0x5c, 0xc1, 0xa4, 0x6d, 0xe3, 0xbd, 0xd9, 0x74, 0x67, 0x4c, 0x07, 0xe4, 0x35, 0x1c, 0xa6, 0x5c,
	0xf7, 0x47, 0xd0, 0x92, 0x7b, 0xf0, 0x7e, 0xbc, 0x05, 0x4c, 0x53, 0xae, 0xdd, 0x81, 0xed, 0x8c,
	0x7a, 0x07, 0xb7, 0x6f, 0x74, 0x06, 0x7e, 0xca, 0xf9, 0x37, 0xf2, 0x7f, 0xa3, 0x70, 0x93, 0xdb,
	0x27, 0xbe, 0x80, 0xf1, 0xad, 0xa8, 0xf4, 0x75, 0x9e, 0x93, 0x59, 0xa3, 0xbb, 0x11, 0x6a, 0xde,
	0xce, 0xa5, 0xb3, 0xd3, 0x74, 0x40, 0x5e, 0xe1, 0x0e, 0xe0, 0x05, 0xef, 0x32, 0xe9, 0x5d, 0xf4,
	0x7d, 0x76, 0xa7, 0xe0, 0xc7, 0xa2, 0xf8, 0xfa, 0xd7, 0x71, 0xbc, 0x84, 0x49, 0x6c, 0xaa, 0x95,
	0x3d, 0xfa, 0x7f, 0x1c, 0xf5, 0xa5, 0xf7, 0x25, 0xb0, 0xbf, 0xd8, 0xe2, 0x57, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xe2, 0xeb, 0x3d, 0x3e, 0xdb, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PlayClient is the client API for Play service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PlayClient interface {
	PlayOrPause(ctx context.Context, in *PlayRequest, opts ...grpc.CallOption) (*Empty, error)
	Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PlayAudioInfo, error)
	Stop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	SetPlayMode(ctx context.Context, in *PlayMode, opts ...grpc.CallOption) (*Empty, error)
	Provider(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ProviderReply, error)
	SetLocalProvider(ctx context.Context, in *LocalProvider, opts ...grpc.CallOption) (*Empty, error)
	SetVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Empty, error)
	Seek(ctx context.Context, in *Second, opts ...grpc.CallOption) (*Empty, error)
	ListAll(ctx context.Context, in *Dir, opts ...grpc.CallOption) (*QueryReplay, error)
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*QueryReplay, error)
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	PushInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Play_PushInfoClient, error)
}

type playClient struct {
	cc *grpc.ClientConn
}

func NewPlayClient(cc *grpc.ClientConn) PlayClient {
	return &playClient{cc}
}

func (c *playClient) PlayOrPause(ctx context.Context, in *PlayRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/server.Play/PlayOrPause", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playClient) Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PlayAudioInfo, error) {
	out := new(PlayAudioInfo)
	err := c.cc.Invoke(ctx, "/server.Play/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playClient) Stop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/server.Play/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playClient) SetPlayMode(ctx context.Context, in *PlayMode, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/server.Play/SetPlayMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playClient) Provider(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ProviderReply, error) {
	out := new(ProviderReply)
	err := c.cc.Invoke(ctx, "/server.Play/Provider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playClient) SetLocalProvider(ctx context.Context, in *LocalProvider, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/server.Play/SetLocalProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playClient) SetVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/server.Play/SetVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playClient) Seek(ctx context.Context, in *Second, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/server.Play/Seek", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playClient) ListAll(ctx context.Context, in *Dir, opts ...grpc.CallOption) (*QueryReplay, error) {
	out := new(QueryReplay)
	err := c.cc.Invoke(ctx, "/server.Play/ListAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*QueryReplay, error) {
	out := new(QueryReplay)
	err := c.cc.Invoke(ctx, "/server.Play/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/server.Play/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playClient) PushInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Play_PushInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Play_serviceDesc.Streams[0], "/server.Play/PushInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &playPushInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Play_PushInfoClient interface {
	Recv() (*PlayAudioInfo, error)
	grpc.ClientStream
}

type playPushInfoClient struct {
	grpc.ClientStream
}

func (x *playPushInfoClient) Recv() (*PlayAudioInfo, error) {
	m := new(PlayAudioInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PlayServer is the server API for Play service.
type PlayServer interface {
	PlayOrPause(context.Context, *PlayRequest) (*Empty, error)
	Status(context.Context, *Empty) (*PlayAudioInfo, error)
	Stop(context.Context, *Empty) (*Empty, error)
	SetPlayMode(context.Context, *PlayMode) (*Empty, error)
	Provider(context.Context, *Empty) (*ProviderReply, error)
	SetLocalProvider(context.Context, *LocalProvider) (*Empty, error)
	SetVolume(context.Context, *VolumeRequest) (*Empty, error)
	Seek(context.Context, *Second) (*Empty, error)
	ListAll(context.Context, *Dir) (*QueryReplay, error)
	Search(context.Context, *SearchRequest) (*QueryReplay, error)
	Ping(context.Context, *Empty) (*Empty, error)
	PushInfo(*Empty, Play_PushInfoServer) error
}

func RegisterPlayServer(s *grpc.Server, srv PlayServer) {
	s.RegisterService(&_Play_serviceDesc, srv)
}

func _Play_PlayOrPause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayServer).PlayOrPause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Play/PlayOrPause",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayServer).PlayOrPause(ctx, req.(*PlayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Play_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Play/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayServer).Status(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Play_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Play/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayServer).Stop(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Play_SetPlayMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayMode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayServer).SetPlayMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Play/SetPlayMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayServer).SetPlayMode(ctx, req.(*PlayMode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Play_Provider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayServer).Provider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Play/Provider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayServer).Provider(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Play_SetLocalProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocalProvider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayServer).SetLocalProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Play/SetLocalProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayServer).SetLocalProvider(ctx, req.(*LocalProvider))
	}
	return interceptor(ctx, in, info, handler)
}

func _Play_SetVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayServer).SetVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Play/SetVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayServer).SetVolume(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Play_Seek_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Second)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayServer).Seek(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Play/Seek",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayServer).Seek(ctx, req.(*Second))
	}
	return interceptor(ctx, in, info, handler)
}

func _Play_ListAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Dir)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayServer).ListAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Play/ListAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayServer).ListAll(ctx, req.(*Dir))
	}
	return interceptor(ctx, in, info, handler)
}

func _Play_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Play/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Play_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Play/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Play_PushInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PlayServer).PushInfo(m, &playPushInfoServer{stream})
}

type Play_PushInfoServer interface {
	Send(*PlayAudioInfo) error
	grpc.ServerStream
}

type playPushInfoServer struct {
	grpc.ServerStream
}

func (x *playPushInfoServer) Send(m *PlayAudioInfo) error {
	return x.ServerStream.SendMsg(m)
}

var _Play_serviceDesc = grpc.ServiceDesc{
	ServiceName: "server.Play",
	HandlerType: (*PlayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlayOrPause",
			Handler:    _Play_PlayOrPause_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Play_Status_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Play_Stop_Handler,
		},
		{
			MethodName: "SetPlayMode",
			Handler:    _Play_SetPlayMode_Handler,
		},
		{
			MethodName: "Provider",
			Handler:    _Play_Provider_Handler,
		},
		{
			MethodName: "SetLocalProvider",
			Handler:    _Play_SetLocalProvider_Handler,
		},
		{
			MethodName: "SetVolume",
			Handler:    _Play_SetVolume_Handler,
		},
		{
			MethodName: "Seek",
			Handler:    _Play_Seek_Handler,
		},
		{
			MethodName: "ListAll",
			Handler:    _Play_ListAll_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _Play_Search_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Play_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PushInfo",
			Handler:       _Play_PushInfo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "play_service.proto",
}
