// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: play_service.proto

package server

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PlayRequest struct {
	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *PlayRequest) Reset()         { *m = PlayRequest{} }
func (m *PlayRequest) String() string { return proto.CompactTextString(m) }
func (*PlayRequest) ProtoMessage()    {}
func (*PlayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_619856292df9b42b, []int{0}
}
func (m *PlayRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayRequest.Merge(m, src)
}
func (m *PlayRequest) XXX_Size() int {
	return m.Size()
}
func (m *PlayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PlayRequest proto.InternalMessageInfo

func (m *PlayRequest) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type VolumeRequest struct {
	Volume float32 `protobuf:"fixed32,1,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (m *VolumeRequest) Reset()         { *m = VolumeRequest{} }
func (m *VolumeRequest) String() string { return proto.CompactTextString(m) }
func (*VolumeRequest) ProtoMessage()    {}
func (*VolumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_619856292df9b42b, []int{1}
}
func (m *VolumeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VolumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VolumeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VolumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeRequest.Merge(m, src)
}
func (m *VolumeRequest) XXX_Size() int {
	return m.Size()
}
func (m *VolumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeRequest proto.InternalMessageInfo

func (m *VolumeRequest) GetVolume() float32 {
	if m != nil {
		return m.Volume
	}
	return 0
}

type PlayAudioInfo struct {
	Status     uint32  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Duration   uint32  `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
	Curr       uint32  `protobuf:"varint,3,opt,name=curr,proto3" json:"curr,omitempty"`
	Volume     float32 `protobuf:"fixed32,4,opt,name=volume,proto3" json:"volume,omitempty"`
	SampleRate uint32  `protobuf:"varint,5,opt,name=sampleRate,proto3" json:"sampleRate,omitempty"`
	Pathinfo   string  `protobuf:"bytes,6,opt,name=pathinfo,proto3" json:"pathinfo,omitempty"`
}

func (m *PlayAudioInfo) Reset()         { *m = PlayAudioInfo{} }
func (m *PlayAudioInfo) String() string { return proto.CompactTextString(m) }
func (*PlayAudioInfo) ProtoMessage()    {}
func (*PlayAudioInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_619856292df9b42b, []int{2}
}
func (m *PlayAudioInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayAudioInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayAudioInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayAudioInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayAudioInfo.Merge(m, src)
}
func (m *PlayAudioInfo) XXX_Size() int {
	return m.Size()
}
func (m *PlayAudioInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayAudioInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PlayAudioInfo proto.InternalMessageInfo

func (m *PlayAudioInfo) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *PlayAudioInfo) GetDuration() uint32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *PlayAudioInfo) GetCurr() uint32 {
	if m != nil {
		return m.Curr
	}
	return 0
}

func (m *PlayAudioInfo) GetVolume() float32 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *PlayAudioInfo) GetSampleRate() uint32 {
	if m != nil {
		return m.SampleRate
	}
	return 0
}

func (m *PlayAudioInfo) GetPathinfo() string {
	if m != nil {
		return m.Pathinfo
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_619856292df9b42b, []int{3}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return m.Size()
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type QueryReplay struct {
	Names []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
}

func (m *QueryReplay) Reset()         { *m = QueryReplay{} }
func (m *QueryReplay) String() string { return proto.CompactTextString(m) }
func (*QueryReplay) ProtoMessage()    {}
func (*QueryReplay) Descriptor() ([]byte, []int) {
	return fileDescriptor_619856292df9b42b, []int{4}
}
func (m *QueryReplay) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReplay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReplay.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReplay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReplay.Merge(m, src)
}
func (m *QueryReplay) XXX_Size() int {
	return m.Size()
}
func (m *QueryReplay) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReplay.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReplay proto.InternalMessageInfo

func (m *QueryReplay) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

type ProviderReply struct {
	ProviderType int32  `protobuf:"varint,1,opt,name=providerType,proto3" json:"providerType,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *ProviderReply) Reset()         { *m = ProviderReply{} }
func (m *ProviderReply) String() string { return proto.CompactTextString(m) }
func (*ProviderReply) ProtoMessage()    {}
func (*ProviderReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_619856292df9b42b, []int{5}
}
func (m *ProviderReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProviderReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProviderReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProviderReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProviderReply.Merge(m, src)
}
func (m *ProviderReply) XXX_Size() int {
	return m.Size()
}
func (m *ProviderReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ProviderReply.DiscardUnknown(m)
}

var xxx_messageInfo_ProviderReply proto.InternalMessageInfo

func (m *ProviderReply) GetProviderType() int32 {
	if m != nil {
		return m.ProviderType
	}
	return 0
}

func (m *ProviderReply) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type LocalProvider struct {
	Dirs []string `protobuf:"bytes,1,rep,name=dirs,proto3" json:"dirs,omitempty"`
}

func (m *LocalProvider) Reset()         { *m = LocalProvider{} }
func (m *LocalProvider) String() string { return proto.CompactTextString(m) }
func (*LocalProvider) ProtoMessage()    {}
func (*LocalProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_619856292df9b42b, []int{6}
}
func (m *LocalProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocalProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LocalProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LocalProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocalProvider.Merge(m, src)
}
func (m *LocalProvider) XXX_Size() int {
	return m.Size()
}
func (m *LocalProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_LocalProvider.DiscardUnknown(m)
}

var xxx_messageInfo_LocalProvider proto.InternalMessageInfo

func (m *LocalProvider) GetDirs() []string {
	if m != nil {
		return m.Dirs
	}
	return nil
}

func init() {
	proto.RegisterType((*PlayRequest)(nil), "server.PlayRequest")
	proto.RegisterType((*VolumeRequest)(nil), "server.VolumeRequest")
	proto.RegisterType((*PlayAudioInfo)(nil), "server.PlayAudioInfo")
	proto.RegisterType((*Empty)(nil), "server.Empty")
	proto.RegisterType((*QueryReplay)(nil), "server.QueryReplay")
	proto.RegisterType((*ProviderReply)(nil), "server.ProviderReply")
	proto.RegisterType((*LocalProvider)(nil), "server.LocalProvider")
}

func init() { proto.RegisterFile("play_service.proto", fileDescriptor_619856292df9b42b) }

var fileDescriptor_619856292df9b42b = []byte{
	// 452 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0x4d, 0x6f, 0xd4, 0x30,
	0x10, 0x4d, 0xba, 0xbb, 0x69, 0x77, 0x20, 0x12, 0x32, 0x1f, 0x8a, 0x7a, 0x88, 0x2a, 0x57, 0x82,
	0x3d, 0x2d, 0xa8, 0xbd, 0xc1, 0xa9, 0x48, 0x08, 0x21, 0x55, 0x62, 0x71, 0x10, 0x57, 0x64, 0x36,
	0x53, 0xb0, 0x94, 0x8d, 0x83, 0x63, 0xaf, 0xc8, 0xbf, 0xe0, 0x2f, 0x70, 0xe6, 0x8f, 0x70, 0xec,
	0x91, 0x23, 0xda, 0xfd, 0x23, 0xc8, 0xf6, 0x26, 0x24, 0xad, 0x56, 0xdc, 0xfc, 0x5e, 0xde, 0xcc,
	0x78, 0xde, 0x73, 0x80, 0x54, 0x05, 0x6f, 0x3e, 0xd6, 0xa8, 0xd6, 0x62, 0x89, 0xf3, 0x4a, 0x49,
	0x2d, 0x49, 0x64, 0x21, 0x2a, 0x7a, 0x0a, 0x77, 0x16, 0x05, 0x6f, 0x18, 0x7e, 0x35, 0x58, 0x6b,
	0xf2, 0x00, 0x26, 0xa2, 0xcc, 0xf1, 0x5b, 0x12, 0x9e, 0x84, 0xb3, 0x98, 0x79, 0x40, 0x9f, 0x40,
	0xfc, 0x41, 0x16, 0x66, 0x85, 0xad, 0xec, 0x11, 0x44, 0x6b, 0x47, 0x38, 0xdd, 0x01, 0xdb, 0x21,
	0xfa, 0x33, 0x84, 0xd8, 0xb6, 0xbb, 0x30, 0xb9, 0x90, 0x6f, 0xca, 0x2b, 0x69, 0x95, 0xb5, 0xe6,
	0xda, 0xd4, 0xbb, 0x8e, 0x3b, 0x44, 0x8e, 0xe1, 0x28, 0x37, 0x8a, 0x6b, 0x21, 0xcb, 0xe4, 0xc0,
	0x7d, 0xe9, 0x30, 0x21, 0x30, 0x5e, 0x1a, 0xa5, 0x92, 0x91, 0xe3, 0xdd, 0xb9, 0x37, 0x71, 0xdc,
	0x9f, 0x48, 0x52, 0x80, 0x9a, 0xaf, 0xaa, 0x02, 0x19, 0xd7, 0x98, 0x4c, 0x5c, 0x45, 0x8f, 0xb1,
	0x73, 0x2a, 0xae, 0xbf, 0x88, 0xf2, 0x4a, 0x26, 0xd1, 0x49, 0x38, 0x9b, 0xb2, 0x0e, 0xd3, 0x43,
	0x98, 0xbc, 0x5a, 0x55, 0xba, 0xb1, 0x26, 0xbc, 0x33, 0xa8, 0x1a, 0x86, 0xd6, 0x29, 0x6b, 0x42,
	0xc9, 0x57, 0x68, 0xaf, 0x3c, 0x9a, 0x4d, 0x99, 0x07, 0xf4, 0x35, 0xc4, 0x0b, 0x25, 0xd7, 0x22,
	0x47, 0x65, 0x75, 0x0d, 0xa1, 0x70, 0xb7, 0xda, 0x11, 0xef, 0x9b, 0xca, 0x5b, 0x31, 0x61, 0x03,
	0xce, 0xae, 0x62, 0xab, 0xdd, 0x8a, 0x53, 0xe6, 0xce, 0xf4, 0x14, 0xe2, 0x4b, 0xb9, 0xe4, 0x45,
	0xdb, 0xcd, 0x8a, 0x72, 0xa1, 0xda, 0x71, 0xee, 0x7c, 0xf6, 0x63, 0x04, 0x60, 0x9d, 0xcc, 0x5c,
	0x4c, 0xe4, 0x85, 0x8f, 0xe9, 0xad, 0x5a, 0x70, 0x53, 0x23, 0xb9, 0x3f, 0xf7, 0xf1, 0xcd, 0x7b,
	0xd9, 0x1d, 0x3f, 0xec, 0x93, 0x5d, 0x02, 0x34, 0x20, 0xcf, 0x20, 0xca, 0xbc, 0xeb, 0x71, 0x2b,
	0x71, 0x7b, 0xef, 0xaf, 0x78, 0x0c, 0xe3, 0x4c, 0xcb, 0xea, 0xa6, 0x7e, 0x08, 0x69, 0x40, 0xce,
	0xe0, 0xa8, 0xdb, 0x62, 0x6f, 0xef, 0xbe, 0x69, 0x34, 0x20, 0xcf, 0xe1, 0x5e, 0x86, 0x7a, 0xe8,
	0x40, 0x27, 0x1e, 0xd0, 0xb7, 0xe7, 0x9d, 0xc3, 0x34, 0x43, 0xed, 0xdf, 0xe2, 0xbf, 0xa2, 0xc1,
	0xdb, 0xbc, 0x5d, 0xf4, 0x14, 0x0e, 0x2f, 0x45, 0xad, 0x2f, 0x8a, 0xe2, 0xe6, 0x1d, 0x3b, 0x1b,
	0x7b, 0xe9, 0xfb, 0xed, 0x17, 0xa2, 0xfc, 0xfc, 0xbf, 0xed, 0x5f, 0x26, 0xbf, 0x36, 0x69, 0x78,
	0xbd, 0x49, 0xc3, 0x3f, 0x9b, 0x34, 0xfc, 0xbe, 0x4d, 0x83, 0xeb, 0x6d, 0x1a, 0xfc, 0xde, 0xa6,
	0xc1, 0xa7, 0xc8, 0xfd, 0x64, 0xe7, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x5e, 0x95, 0x7a, 0x06,
	0x7a, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PlayServerClient is the client API for PlayServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PlayServerClient interface {
	PlayOrPause(ctx context.Context, in *PlayRequest, opts ...grpc.CallOption) (*PlayAudioInfo, error)
	Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PlayAudioInfo, error)
	Stop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Provider(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ProviderReply, error)
	SetLocalProvider(ctx context.Context, in *LocalProvider, opts ...grpc.CallOption) (*Empty, error)
	SetVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Empty, error)
	ListAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*QueryReplay, error)
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type playServerClient struct {
	cc *grpc.ClientConn
}

func NewPlayServerClient(cc *grpc.ClientConn) PlayServerClient {
	return &playServerClient{cc}
}

func (c *playServerClient) PlayOrPause(ctx context.Context, in *PlayRequest, opts ...grpc.CallOption) (*PlayAudioInfo, error) {
	out := new(PlayAudioInfo)
	err := c.cc.Invoke(ctx, "/server.PlayServer/PlayOrPause", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playServerClient) Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PlayAudioInfo, error) {
	out := new(PlayAudioInfo)
	err := c.cc.Invoke(ctx, "/server.PlayServer/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playServerClient) Stop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/server.PlayServer/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playServerClient) Provider(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ProviderReply, error) {
	out := new(ProviderReply)
	err := c.cc.Invoke(ctx, "/server.PlayServer/Provider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playServerClient) SetLocalProvider(ctx context.Context, in *LocalProvider, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/server.PlayServer/SetLocalProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playServerClient) SetVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/server.PlayServer/SetVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playServerClient) ListAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*QueryReplay, error) {
	out := new(QueryReplay)
	err := c.cc.Invoke(ctx, "/server.PlayServer/ListAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playServerClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/server.PlayServer/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlayServerServer is the server API for PlayServer service.
type PlayServerServer interface {
	PlayOrPause(context.Context, *PlayRequest) (*PlayAudioInfo, error)
	Status(context.Context, *Empty) (*PlayAudioInfo, error)
	Stop(context.Context, *Empty) (*Empty, error)
	Provider(context.Context, *Empty) (*ProviderReply, error)
	SetLocalProvider(context.Context, *LocalProvider) (*Empty, error)
	SetVolume(context.Context, *VolumeRequest) (*Empty, error)
	ListAll(context.Context, *Empty) (*QueryReplay, error)
	Ping(context.Context, *Empty) (*Empty, error)
}

// UnimplementedPlayServerServer can be embedded to have forward compatible implementations.
type UnimplementedPlayServerServer struct {
}

func (*UnimplementedPlayServerServer) PlayOrPause(ctx context.Context, req *PlayRequest) (*PlayAudioInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayOrPause not implemented")
}
func (*UnimplementedPlayServerServer) Status(ctx context.Context, req *Empty) (*PlayAudioInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedPlayServerServer) Stop(ctx context.Context, req *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (*UnimplementedPlayServerServer) Provider(ctx context.Context, req *Empty) (*ProviderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Provider not implemented")
}
func (*UnimplementedPlayServerServer) SetLocalProvider(ctx context.Context, req *LocalProvider) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLocalProvider not implemented")
}
func (*UnimplementedPlayServerServer) SetVolume(ctx context.Context, req *VolumeRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVolume not implemented")
}
func (*UnimplementedPlayServerServer) ListAll(ctx context.Context, req *Empty) (*QueryReplay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAll not implemented")
}
func (*UnimplementedPlayServerServer) Ping(ctx context.Context, req *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}

func RegisterPlayServerServer(s *grpc.Server, srv PlayServerServer) {
	s.RegisterService(&_PlayServer_serviceDesc, srv)
}

func _PlayServer_PlayOrPause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayServerServer).PlayOrPause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.PlayServer/PlayOrPause",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayServerServer).PlayOrPause(ctx, req.(*PlayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayServer_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayServerServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.PlayServer/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayServerServer).Status(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayServer_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayServerServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.PlayServer/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayServerServer).Stop(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayServer_Provider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayServerServer).Provider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.PlayServer/Provider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayServerServer).Provider(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayServer_SetLocalProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocalProvider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayServerServer).SetLocalProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.PlayServer/SetLocalProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayServerServer).SetLocalProvider(ctx, req.(*LocalProvider))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayServer_SetVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayServerServer).SetVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.PlayServer/SetVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayServerServer).SetVolume(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayServer_ListAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayServerServer).ListAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.PlayServer/ListAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayServerServer).ListAll(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayServer_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayServerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.PlayServer/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayServerServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _PlayServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "server.PlayServer",
	HandlerType: (*PlayServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlayOrPause",
			Handler:    _PlayServer_PlayOrPause_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _PlayServer_Status_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _PlayServer_Stop_Handler,
		},
		{
			MethodName: "Provider",
			Handler:    _PlayServer_Provider_Handler,
		},
		{
			MethodName: "SetLocalProvider",
			Handler:    _PlayServer_SetLocalProvider_Handler,
		},
		{
			MethodName: "SetVolume",
			Handler:    _PlayServer_SetVolume_Handler,
		},
		{
			MethodName: "ListAll",
			Handler:    _PlayServer_ListAll_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _PlayServer_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "play_service.proto",
}

func (m *PlayRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		i = encodeVarintPlayService(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VolumeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VolumeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VolumeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Volume != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Volume))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *PlayAudioInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayAudioInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayAudioInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pathinfo) > 0 {
		i -= len(m.Pathinfo)
		copy(dAtA[i:], m.Pathinfo)
		i = encodeVarintPlayService(dAtA, i, uint64(len(m.Pathinfo)))
		i--
		dAtA[i] = 0x32
	}
	if m.SampleRate != 0 {
		i = encodeVarintPlayService(dAtA, i, uint64(m.SampleRate))
		i--
		dAtA[i] = 0x28
	}
	if m.Volume != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Volume))))
		i--
		dAtA[i] = 0x25
	}
	if m.Curr != 0 {
		i = encodeVarintPlayService(dAtA, i, uint64(m.Curr))
		i--
		dAtA[i] = 0x18
	}
	if m.Duration != 0 {
		i = encodeVarintPlayService(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x10
	}
	if m.Status != 0 {
		i = encodeVarintPlayService(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Empty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryReplay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReplay) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReplay) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Names) > 0 {
		for iNdEx := len(m.Names) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Names[iNdEx])
			copy(dAtA[i:], m.Names[iNdEx])
			i = encodeVarintPlayService(dAtA, i, uint64(len(m.Names[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ProviderReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProviderReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProviderReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPlayService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.ProviderType != 0 {
		i = encodeVarintPlayService(dAtA, i, uint64(m.ProviderType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LocalProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocalProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocalProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Dirs) > 0 {
		for iNdEx := len(m.Dirs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Dirs[iNdEx])
			copy(dAtA[i:], m.Dirs[iNdEx])
			i = encodeVarintPlayService(dAtA, i, uint64(len(m.Dirs[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintPlayService(dAtA []byte, offset int, v uint64) int {
	offset -= sovPlayService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PlayRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovPlayService(uint64(m.Index))
	}
	return n
}

func (m *VolumeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Volume != 0 {
		n += 5
	}
	return n
}

func (m *PlayAudioInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovPlayService(uint64(m.Status))
	}
	if m.Duration != 0 {
		n += 1 + sovPlayService(uint64(m.Duration))
	}
	if m.Curr != 0 {
		n += 1 + sovPlayService(uint64(m.Curr))
	}
	if m.Volume != 0 {
		n += 5
	}
	if m.SampleRate != 0 {
		n += 1 + sovPlayService(uint64(m.SampleRate))
	}
	l = len(m.Pathinfo)
	if l > 0 {
		n += 1 + l + sovPlayService(uint64(l))
	}
	return n
}

func (m *Empty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryReplay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Names) > 0 {
		for _, s := range m.Names {
			l = len(s)
			n += 1 + l + sovPlayService(uint64(l))
		}
	}
	return n
}

func (m *ProviderReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProviderType != 0 {
		n += 1 + sovPlayService(uint64(m.ProviderType))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPlayService(uint64(l))
	}
	return n
}

func (m *LocalProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Dirs) > 0 {
		for _, s := range m.Dirs {
			l = len(s)
			n += 1 + l + sovPlayService(uint64(l))
		}
	}
	return n
}

func sovPlayService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPlayService(x uint64) (n int) {
	return sovPlayService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PlayRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VolumeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VolumeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VolumeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volume", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Volume = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipPlayService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayAudioInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayAudioInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayAudioInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Curr", wireType)
			}
			m.Curr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Curr |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volume", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Volume = float32(math.Float32frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SampleRate", wireType)
			}
			m.SampleRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SampleRate |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pathinfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pathinfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPlayService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReplay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReplay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReplay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Names", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Names = append(m.Names, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProviderReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProviderReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProviderReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderType", wireType)
			}
			m.ProviderType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProviderType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocalProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dirs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dirs = append(m.Dirs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPlayService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPlayService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlayService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlayService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPlayService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPlayService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPlayService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPlayService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPlayService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPlayService = fmt.Errorf("proto: unexpected end of group")
)
